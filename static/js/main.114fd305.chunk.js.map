{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","useState","query","setQuery","selectedOption","setSelectedOption","filteredTodos","useMemo","filter","todo","title","toLowerCase","includes","completed","className","type","value","onChange","event","target","selected","map","cn","checked","readOnly","userId","onClick","id","request","fetch","then","response","json","CurrentUser","clearUser","selectedUser","setSelectedUser","useEffect","getUser","data","name","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.114fd305.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  selectedUserId: number,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  const filteredTodos = useMemo(() => (\n    todos\n      .filter(todo => (\n        todo.title.toLowerCase().includes(query.toLowerCase())\n      ))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return todo.completed === false;\n\n          case 'completed':\n            return todo.completed === true;\n\n          default:\n            return todo;\n        }\n      })\n  ), [query, todos, selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"filter\">\n        <input\n          type=\"text\"\n          className=\"filter__input\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <select\n          className=\"filter__input\"\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value)}\n        >\n          <option selected value=\"all\">\n            all\n          </option>\n          <option value=\"active\">\n            active\n          </option>\n          <option value=\"completed\">\n            completed\n          </option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n\n            <li\n              key={todo.id}\n              className={cn(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                className={cn(\n                  {\n                    'TodoList__user-button--selected':\n                   todo.userId === selectedUserId,\n                  },\n                  'button',\n                  'TodoList__user-button',\n                )}\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport function request(query: string) {\n  return fetch(`${API_URL}${query}`)\n    .then(response => response.json());\n}\n\nexport const getTodos = (): Promise<Todo[]> => request('/todos');\n\nexport const getUser = (userId: number): Promise<User> => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  clearUser: () => void,\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(userId)\n      .then(data => setSelectedUser(data));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:&nbsp;\n          {selectedUser?.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n\n      <button\n        className=\"CurrentUser__clear TodoList__user-button--selected\n        button\"\n        type=\"button\"\n        onClick={clearUser}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const clearUserId = () => setSelectedUserId(0);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUser={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}